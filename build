#!/usr/bin/env sh

source lib/keepass.sh

action=REBUILD
show_trace=
command=test
cleanup=0
overwrite_sshkeys=0
while getopts 'hdsyurbctmo' OPTION; do
  case "$OPTION" in
    h)
      echo "Usage: $0 [-hdsur] [version/machine] [module]"
      echo "  -b             rebuild & boot"
      echo "  -c             Diff of changes between latest & prev upgrade"
      echo "  -d             run nix-collect-garbage"
      echo "  -m [machine]   Build a different machine (aramid/minoo/sapling/spruce)"
      echo "  -o             Overwrite SSH keys"
      echo "  -r <version>   release - rebuild & switch, tag and label with <version> e.g. $0 -r v1"
      echo "  -s             rebuild & switch"
      echo "  -t             Show trace"
      echo "  -u             upgrade channel and switch"
      echo "  -y             dry run"
      echo "  [module]       Pick a base module from machines/$machine/. Defaults to default.nix"
      echo "  -h             this help"
      exit 0
      ;;
    d)
      cleanup=1
      ;;
    o)
      overwrite_sshkeys=1
      ;;
    s)
      action=SWITCH
      command=switch
      ;;
    y)
      command=dry-build
      ;;
    b)
      action=BOOT
      command=boot
      ;;
    u)
      action=UPGRADE
      command=switch
      ;;
    c)
      nvd diff $(ls -d1v /nix/var/nix/profiles/system-*-link|tail -n 2)
      exit 0
      ;;
    t)
      show_trace=--show-trace
      ;;
    m)
      command=build
      machine=GET
      ;;
    r)
      action=RELEASE
      command=switch
      shift $(($OPTIND - 1))
      version="$1"

      if [ -z "$version" ]; then
        echo "Missing version from $0 -r <version>"
        exit 1
      else
        git tag "$version"
      fi

      ;;
  esac
done
shift $(($OPTIND - 1))

if [ "$machine" = "GET" ]; then
  machine=$1
  shift
else
  machine=$(hostname)
  commit_msg=$1
fi

module=$1

configuration_nix=src/machines/$machine/$module

# Check we have Internet
echo -n "[WIFI] "
if ! ping -c 1 google.com > /dev/null 2>&1; then
  # Check we have Wifi credentials
  if [ -f "secrets/wifi" ]; then
    source secrets/wifi
  else
    [ -f "secrets/password" ] && passwd=$(cat "secrets/password")
    askpass "Enter KeePass password for wifi credentials:"
    keepass_fetch_wifi
  fi

  echo "[WIFI] Network name (SSID) [$ssid]:"
  read ssid_override
  if [ "$ssid_override" ]; then
    echo "[WIFI] Password (PSK):"
    ssid=ssid_override
    read psk
  fi

  # Add to NetworkManager if not
  nmcli device wifi connect $ssid password $psk
  echo "[WIFI] Connecting..."
  while ! ping -c 1 google.com > /dev/null 2>&1; do sleep 1; done
else
  echo "Connected"
fi

[ "$version" ] && echo "[LABEL] $version"

# Check if both catppuccin and nixos-hardware channels have been added
echo -n "[CHANNELS] "
if ! sudo nix-channel --list | tr '\n' ' ' | grep -sE 'catppuccin.*nixos-hardware' > /dev/null; then
  echo "Updating"
  sudo nix-channel --add https://github.com/catppuccin/nix/archive/main.tar.gz catppuccin
  sudo nix-channel --add https://github.com/NixOS/nixos-hardware/archive/master.tar.gz nixos-hardware
  action=UPGRADE
else
  echo "Up-to-date"
fi

# Fetch hashed_password and ssh keys unless they already exist
home=$HOME
sshdir="$home/.ssh"
echo -n "[SECRETS] "
hashedpw="secrets/hashed_password"
if [ ! -f $hashedpw ]; then
  echo "Missing "
  askpass "Enter KeePass password for $hashedpw:"
  keepass_export_hashed_password $hashedpw
else
  echo "$hashedpw exists"
fi

# Export all public keys to secrets/ for use in src/ssh.nix
for m in aramid minoo sapling spruce; do
  keyname="secrets/${prefix}_${m}.pub"
  if [ "$overwrite_sshkeys" -eq "1" ]; then
    rm $keyname
  fi

  if [ ! -f $keyname ]; then
    askpass "Enter KeePass password for public key export:"
    keepass_export_key public ${prefix}_${m} secrets/
    echo "Exported key $keyname"
  fi
done

echo -n "[SSH] "
[ "$overwrite_sshkeys" -eq "1" ] && rm -rf $home/.ssh
if [ ! -d $home/.ssh ]; then
  echo "No $home/.ssh folder. Creating"
  askpass "Enter KeePass password for ~/.ssh/:"

  # Export public/private keys for this machine to ~/.ssh/
  mkdir -p $sshdir
  chmod 700 $sshdir
  keepass_export_keys $sshdir $machine github
  keepass_export_keys $sshdir $machine gitlab
else
  echo "~/.ssh folder exists"
fi

machine_sshkey="/etc/ssh/ssh_host_ed25519_key"
echo -n "[SSH] "
if [ "$overwrite_sshkeys" -eq "1" ]; then
  sudo rm $machine_sshkey
  sudo rm "$machine_sshkey.pub"
fi

if [ ! -f $machine_sshkey ]; then
  echo "No $machine_sshkey. Exporting"
  askpass "Enter KeePass password for /etc/ssh/:"

  keepass_export_keys $sshdir $machine
  sudo cp "$sshdir/$prefix" $machine_sshkey
  sudo cp "$sshdir/$prefix.pub" "$machine_sshkey.pub"
  sudo chown root:root $machine_sshkey
  sudo chown root:root "$machine_sshkey.pub"
else
  echo "$machine_sshkey exists"
fi

# Switch to key-based encryption on drive 2 of machines with 2 drives
# Currently, this is just Minoo
pool_name="dpool"
zfs_keydir="/root"
zfs_keypath="$zfs_keydir/.${pool_name}.key"
echo -n "[$pool_name] "
if [ "$machine" = "minoo" ] && sudo test ! -f "$zfs_keypath"; then
  echo "No $pool_name encryption key at ${zfs_keypath}. Creating and assigning"
  source lib/disks2.sh
  sudo mkdir -p $zfs_keydir
  sudo chmod 700 $zfs_keydir
  generate_key $zfs_keypath
  change_key $pool_name $zfs_keypath
else
  echo "$pool_name exists"
fi

echo "[$action] $machine"
[ "$cleanup" = "1" ] && sudo nix-collect-garbage -d
[ "$action" = "UPGRADE" ] && sudo nix-channel --update
[ "$version" ] && label="NIXOS_LABEL=$version"
sudo $label NIXOS_CONFIG=$(pwd)/$configuration_nix nixos-rebuild $command $show_trace
#                                             -I nixpkgs=/data/code/nixpkgs # -------^

# Remove secrets once we're done encrypting drives and accessing KeePass
result=$?
echo "Result of nixos-rebuild: $result"
if [ "$?" -eq "0" ]; then
  [ -f secrets/wifi ] && sudo rm secrets/wifi
  [ -f secrets/hashed_password ] && rm secrets/hashed_password
fi