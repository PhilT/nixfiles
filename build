#!/usr/bin/env sh

source lib/keepass.sh

action=REBUILD
show_trace=
command=test
cleanup=0
overwrite_sshkeys=0

while getopts 'hdsyurbctmo' OPTION; do
  case "$OPTION" in
    h)
      echo "Usage: $0 [-hdsur] [version/machine] [module]"
      echo "  -b             rebuild & boot"
      echo "  -c             Diff of changes between latest & prev upgrade"
      echo "  -d             run nix-collect-garbage"
      echo "  -m [machine]   Build a different machine (aramid/minoo/seedling/spruce)"
      echo "  -o             Overwrite SSH keys"
      echo "  -r <version>   release - rebuild & switch, tag and label with <version> e.g. $0 -r v1"
      echo "  -s             rebuild & switch"
      echo "  -t             Show trace"
      echo "  -u             upgrade channel and switch"
      echo "  -y             dry run"
      echo "  [module]       Pick a base module from machines/$machine/. Defaults to default.nix"
      echo "  -h             this help"
      exit 0
      ;;
    d)
      cleanup=1
      ;;
    o)
      overwrite_sshkeys=1
      ;;
    s)
      action=SWITCH
      command=switch
      ;;
    y)
      command=dry-build
      ;;
    b)
      action=BOOT
      command=boot
      ;;
    u)
      action=UPGRADE
      command=switch
      ;;
    c)
      nvd diff $(ls -d1v /nix/var/nix/profiles/system-*-link|tail -n 2)
      exit 0
      ;;
    t)
      show_trace=--show-trace
      ;;
    m)
      command=build
      machine=PARAM
      ;;
    r)
      action=RELEASE
      command=switch
      shift $(($OPTIND - 1))
      version="$1"

      if [ -z "$version" ]; then
        echo "Missing version from $0 -r <version>"
        exit 1
      else
        git tag "$version"
      fi

      ;;
  esac
done
shift $(($OPTIND - 1))

# Use current hostname or with machine specified with -m
if [ "$machine" = "PARAM" ]; then
  machine=$1
  shift
else
  machine=$(hostname)
  commit_msg=$1
fi

module=$1

configuration_nix=src/machines/$machine/$module

# Ephemeral storage
if [ "$machine" = "aramid" ] || [ "$machine" = "seedling" ]; then
  etc_dir=/data/etc
else
  etc_dir=/etc
fi

# Check we have Internet
echo -n "[WIFI] "
if ! ping -c 1 google.com > /dev/null 2>&1; then
  # Check we have Wifi credentials
  if [ -f "secrets/wifi" ]; then
    source secrets/wifi
  else
    [ -f "secrets/password" ] && passwd=$(cat "secrets/password")
    askpass "Enter KeePass password for wifi credentials:"
    keepass_fetch_wifi
  fi

  echo "[WIFI] Network name (SSID) [$ssid]:"
  read ssid_override
  if [ "$ssid_override" ]; then
    echo "[WIFI] Password (PSK):"
    ssid=$ssid_override
    read psk
  fi

  # Add to NetworkManager if not
  nmcli device wifi connect $ssid password $psk
  echo "[WIFI] Connecting..."
  while ! ping -c 1 google.com > /dev/null 2>&1; do sleep 1; done
else
  echo "Connected"
fi

[ "$version" ] && echo "[LABEL] $version"

# Check if both catppuccin and nixos-hardware channels have been added
echo -n "[CHANNELS] "
if ! sudo nix-channel --list | tr '\n' ' ' | grep -sE 'catppuccin.*nixos-hardware' > /dev/null; then
  echo "Updating"
  sudo nix-channel --add https://github.com/catppuccin/nix/archive/main.tar.gz catppuccin
  sudo nix-channel --add https://github.com/NixOS/nixos-hardware/archive/master.tar.gz nixos-hardware
  action=UPGRADE
else
  echo "Up-to-date"
fi

# Fetch hashed_password and ssh keys unless they already exist
home_dir=$HOME
persisted_home_dir=/home/phil
ssh_dir="$persisted_home_dir/ssh"
echo -n "[SECRETS] "
hashedpw="secrets/hashed_password"
if [ ! -f $hashedpw ]; then
  echo "Missing "
  askpass "Enter KeePass password for $hashedpw:"
  keepass_export_hashed_password $hashedpw
else
  echo "$hashedpw exists"
fi

# Export all public keys to secrets/ for use in src/ssh.nix
./mkkeys $overwrite_sshkeys home

echo -n "[SSH] "
[ "$overwrite_sshkeys" -eq "1" ] && rm -rf $ssh_dir
if [ ! -d $ssh_dir ]; then
  echo "No $ssh_dir folder. Creating"
  askpass "Enter KeePass password for ${ssh_dir}:"

  # Export public/private keys for this machine to ~/.ssh/
  mkdir -p $ssh_dir
  chmod 700 $ssh_dir
  keepass_export_keys $ssh_dir $machine github
  keepass_export_keys $ssh_dir $machine gitlab
else
  echo "${ssh_dir} folder exists"
fi

if [ "$machine" = "minoo" ]; then
  prefix="id_ecdsa"
  machine_sshkey="${etc_dir}/ssh/ssh_host_ecdsa_key"
else
  machine_sshkey="${etc_dir}/ssh/ssh_host_ed25519_key"
fi
echo -n "[SSH] "
if [ "$overwrite_sshkeys" -eq "1" ]; then
  sudo rm $machine_sshkey
  sudo rm "$machine_sshkey.pub"
fi

if [ ! -f $machine_sshkey ]; then
  echo "No $machine_sshkey. Exporting"
  askpass "Enter KeePass password for ${etc_dir}/ssh/:"

  mkdir -p ${etc_dir}/ssh
  keepass_export_keys $ssh_dir $machine
  sudo cp "$ssh_dir/$prefix" $machine_sshkey
  sudo cp "$ssh_dir/$prefix.pub" "$machine_sshkey.pub"
  sudo chown root:root $machine_sshkey
  sudo chown root:root "$machine_sshkey.pub"
else
  echo "$machine_sshkey exists"
fi

# Switch to key-based encryption on drive 2 of machines with 2 drives
# Currently, this is just Minoo
if [ "$machine" = "minoo" ]; then
  pool_name="dpool"
  zfs_keydir="/root"
  zfs_keypath="$zfs_keydir/.${pool_name}.key"
  echo -n "[$pool_name] "
  if zpool list | grep $pool_name && sudo test ! -f "$zfs_keypath"; then
    echo "No $pool_name encryption key at ${zfs_keypath}. Creating and assigning"
    source lib/disks2.sh
    sudo mkdir -p $zfs_keydir
    sudo chmod 700 $zfs_keydir
    generate_key $zfs_keypath
    change_key $pool_name $zfs_keypath
  elif sudo test -f "$zfs_keypath"; then
    echo "$zfs_keypath exists"
  else
    echo "$pool_name not available. Skipping."
  fi
fi

echo "[$action] $machine"
[ "$cleanup" = "1" ] && sudo nix-collect-garbage -d
[ "$action" = "UPGRADE" ] && sudo nix-channel --update
[ "$version" ] && label="NIXOS_LABEL=$version"
sudo $label NIXOS_CONFIG=$(pwd)/$configuration_nix nixos-rebuild $command $show_trace |& nom
#                                             -I nixpkgs=/data/code/nixpkgs # -------^