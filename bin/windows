#!/usr/bin/env fish

# https://wiki.debian.org/SecureBoot/VirtualMachine
# https://macroform-node.medium.com/building-a-windows-11-vm-with-qemu-using-tpm-emulation-for-research-malware-analysis-part-1-8846378b9582
# https://ubuntu.com/server/docs/gpu-virtualization-with-qemu-kvm - Suggestion for -device for GPU passthrough settings
# Turn off Windows Fast Start: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Power -> HiberbootEnabled -> 0
# lsblk -o NAME,LABEL,MODEL,SERIAL
# lshw -short # Nice list of all devices and peripherals
# sudo lshw -businfo # Devices and connected bus (e.g. 0000:04:00.0)

set enable_hugepages false

if test -z "$OVMF_DIR"
  echo "Expected \$OVMF_DIR to be defined in qemu.nix"
  exit 1
end

set -gx tpm_dir /data/code/nixfiles/tmp/emulated_tpm
set -gx tpm_sock {$tpm_dir}/swtpm-sock
set -gx OVMF_CODE {$OVMF_DIR}/OVMF_CODE.fd
set -gx OVMF_VARS OVMF_VARS.ms.fd

set -gx GPU "0000:01:00.0"
set -gx GPU_AUDIO "0000:01:00.1"
set -gx USB_CONTROLLER "0000:07:00.0"
set -gx GAMES_SSD "0000:08:00.0"

# Bind PCI devices
./vfio-bind $USB_CONTROLLER vfio-pci
./vfio-bind $GAMES_SSD vfio-pci

if not test -f tmp/$OVMF_VARS
  cp $OVMF_DIR/$OVMF_VARS tmp/$OVMF_VARS
  chmod +w tmp/$OVMF_VARS
end

if not test -f tmp/windows.qcow2
  qemu-img create -f qcow2 tmp/windows.qcow2 128G
end

rm -rf $tpm_dir
test -d $tpm_dir || mkdir -p $tpm_dir

swtpm socket --tpmstate dir=$tpm_dir --ctrl type=unixio,path=$tpm_sock --log level=20 --tpm2 -d

# CPU Scaling
echo performance | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor

# CPU Pinning
set -gx CORES 28
set -gx CORES_HALF (math $CORES / 2)
set -gx HOST_CORES "0,1,16,17"
set -gx VM_CORES "2-15,18-31"
set -gx RAM 24
set -gx RAM_G {$RAM}G

# Hugepages
if $enable_hugepages
  set HUGEPAGES_SIZE 2
  set HUGEPAGES_TOTAL (math $RAM x 1024 / $HUGEPAGES_SIZE)
  echo Hugepages total: {$HUGEPAGES_TOTAL}
  hugeadm --pool-pages-min {$HUGEPAGES_SIZE}MB:{$HUGEPAGES_TOTAL}
  hugeadm --set-recommended-shmmax
  mkdir -p /dev/hugepages
  mount -t hugetlbfs nodev /dev/hugepages
end

# https://www.qemu.org/docs/master/system/i386/hyperv.html
set -gx HV_ENLIGHT "hv_relaxed,hv_vapic,hv-vpindex,hv-runtime,hv-time,hv-synic,hv-stimer,hv-tlbflush,hv-frequencies,hv-apicv"

set qemu_params (cat bin/windows.qemu | sed '/^#/d' | sed '/^$/d' | envsubst -no-unset | string join " " | string split " ")
taskset -c $VM_CORES qemu-system-x86_64 $qemu_params

pkill swtpm

if $enable_hugepages
  echo "Freeing Hugepages"
  umount /dev/hugepages
  hugeadm --pool-pages-min {$HUGEPAGES_SIZE}MB:0
end

# Bind PCI devices back to physical controllers
echo "Freeing VFIO binds"
./vfio-bind $USB_CONTROLLER xhci_hcd
./vfio-bind $GAMES_SSD nvme

# CPU Scaling
echo powersave | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor