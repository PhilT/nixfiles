#!/usr/bin/env sh

source lib/keepass.sh

# Generates SSH keys and adds them to KeePass

# Nomenclature:
# authorized_keys is what sshd accepts as incoming requests.
# known_hosts is what an ssh client knows about when connecting to

overwrite_sshkeys=$1
shift
services=$@

if [ -z "$services" ]; then
  services="home github gitlab"
fi

export_key() {
  local keyfile=$1
  local keypath=$2
  keepass_export_key public $keyfile secrets/
  keepass_export_key private $keyfile secrets/
  chmod 600 $keypath
  echo "$keypath exported"
}

optionally_remove_key() {
  local keypath=$1
  if [ "$overwrite_sshkeys" -eq "1" ]; then
    rm -f $keypath
    rm -f "${keypath}.pub"
  fi
}

# Generate SSH key with best encryption (ed25519 is the default anyway)
# and 100 rounds (a bit slower but more secure).
gen_key() {
  local keytype=$1
  local keyfile=$2
  local keypath=$3
  local force=""

  if [ "$overwrite_sshkeys" = "2" ]; then
    echo "Overwriting SSH key in KeePass. Skipping ssh-keygen"
    force="-f"
  else
    ssh-keygen -q -t $keytype -a 100 -f secrets/$keyfile -N ""
  fi

  if ! keepass_exists $keyfile; then
    keepass_create $keyfile
  fi
  keepass_import_keys $keyfile $force
  echo "$keypath created"
}

do_key() {
  local keytype=$1
  local name=$2
  local keyfile="id_${keytype}_${name}"
  local keypath="secrets/${keyfile}"

  optionally_remove_key $keypath

  if [ -f $keypath ] && [ -f "${keypath}.pub" ] && [ "$overwrite_sshkeys" != "2" ]; then
    # If both keys exist locally and we're not overwritting the keys stored in KeePass then skip
    echo "$keypath exists. Skipping"
  else
    askpass "Enter KeePass password for SSH key access:"
    if keepass_exists $keyfile && [ "$overwrite_sshkeys" != "2" ]; then
      export_key $keyfile $keypath
    else
      # This will skip key gen and just import the keys if $overwrite_sshkeys is 2
      gen_key $keytype $keyfile $keypath
    fi
  fi
}

for machine in aramid minoo minoo_ecdsa sapling seedling spruce; do
  for service in $services; do
    keytype="ed25519"
    if [ "$service" = "home" ]; then
      name="$machine"
      if [ "$machine" = "minoo_ecdsa" ]; then
        name="minoo"
        keytype="ecdsa"
      fi
    else
      name=${machine}_$service
    fi

    do_key $keytype $name
  done
done

echo "$db updated"