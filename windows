#!/usr/bin/env sh

# https://wiki.debian.org/SecureBoot/VirtualMachine
# https://macroform-node.medium.com/building-a-windows-11-vm-with-qemu-using-tpm-emulation-for-research-malware-analysis-part-1-8846378b9582
# https://ubuntu.com/server/docs/gpu-virtualization-with-qemu-kvm - Suggestion for -device for GPU passthrough settings
# Turn off Windows Fast Start: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Power -> HiberbootEnabled -> 0

# [ ] Add -d to swtpm

tpm_dir=/data/code/nixfiles/tmp/emulated_tpm
tpm_sock=${tpm_dir}/swtpm-sock
OVMF_DIR=/nix/store/my571d8qw91lxnhsk439z8sj233c2cz7-OVMF-202411-fd/FV
OVMF_CODE=${OVMF_DIR}/OVMF_CODE.fd
OVMF_VARS=OVMF_VARS.ms.fd
SSH_PORT="5555"
NVME_GAMES=/dev/disk/by-id/nvme-Samsung_SSD_970_EVO_Plus_2TB_S4J4NG0M600518W

CORES=28
IOMMU_GPU="01:00.0"
IOMMU_GPU_AUDIO="01:00.1"

IOMMU_USB_CONTROLLER="0000:07:00.0"

if [ ! -f tmp/$OVMF_VARS ]; then
  cp $OVMF_DIR/$OVMF_VARS tmp/$OVMF_VARS
  chmod +w tmp/$OVMF_VARS
fi

[ ! -f tmp/windows.qcow2 ] && qemu-img create -f qcow2 tmp/windows.qcow2 128G

rm -rf $tpm_dir
[ ! -d $tpm_dir ] && mkdir -p $tpm_dir


swtpm socket --tpmstate dir=${tpm_dir} \
  --ctrl type=unixio,path=${tpm_sock} \
  --log level=20 --tpm2 -d
swtpm_pid=$!

# Unbind USB Controller and bind to VFIO
#echo "0000:${IOMMU_USB_CONTROLLER}" | tee /sys/bus/pci/devices/0000:${IOMMU_USB_CONTROLLER}/driver/unbind
#echo "0000:${IOMMU_USB_CONTROLLER}" | tee /sys/bus/pci/drivers/vfio-pci/bind

VM_CORES="4-15,18-31"

#cset shield --cpu=$VM_CORES --kthread=on
# taskset -c $VM_CORES
#
# TODO:
# [ ] - Try to get USB Audio controller working
# [ ] - Try again to get cset shield to work with taskset
# [ ] - Which NIC card to use? Or should I use bridge networking? What's the advantage?

qemu-system-x86_64 \
  -name "Windows 11 on Qemu",process=win11vm \
  -machine q35,smm=on,usb=off,accel=kvm \
  -vga none \
  -nographic \
  -serial none \
  -parallel none \
  -m 24G \
  -smp $CORES,cores=$(($CORES / 2)),threads=2,sockets=1 \
  -enable-kvm \
  -cpu host,kvm=off,hv_relaxed,hv_spinlocks=0x1fff,hv_time,hv_vapic,hv_vendor_id=0xDEADBEEFFF \
  -drive file=tmp/windows.qcow2,if=none,id=win \
  -drive file=${NVME_GAMES},format=raw,if=virtio,id=games \
  -device vfio-pci,host=$IOMMU_GPU,multifunction=on,x-vga=on \
  -device vfio-pci,host=$IOMMU_GPU_AUDIO \
  -device vfio-pci,host=$IOMMU_USB_CONTROLLER \
  -device qemu-xhci \
  -device usb-host,vendorid=0x320f,productid=0x504a \
  -device usb-host,vendorid=0x258a,productid=0x2022 \
  -device usb-host,vendorid=0x258a,productid=0x2011 \
  -device usb-host,vendorid=0x28de,productid=0x2102 \
  -device usb-host,vendorid=0x28de,productid=0x2300 \
  -device usb-host,vendorid=0x0483,productid=0x0522 \
  -device usb-host,vendorid=0x0483,productid=0x0525 \
  -device usb-host,vendorid=0x22e8,productid=0xdac2 \
  -device nvme,serial=deadbeef,drive=win,bootindex=1 \
  -device tpm-tis,tpmdev=tpm0 \
  -nic user,ipv6=off,model=rtl8139,mac=84:1b:76:c9:01:a5 \
  -chardev socket,id=chrtpm,path=${tpm_sock} \
  -tpmdev emulator,id=tpm0,chardev=chrtpm \
  -global driver=cfi.pflash01,property=secure,value=on \
  -drive if=pflash,format=raw,unit=0,file="${OVMF_CODE}",readonly=on \
  -drive if=pflash,format=raw,unit=1,file="tmp/${OVMF_VARS}" \
  -rtc clock=host,base=localtime,driftfix=slew

  # -device virtio-blk-pci,drive=games \
  #-drive file=/dev/nvme0n1p3,format=raw,if=none,id=ssd1 \
  #-device virtio-blk-pci,drive=ssd1 \

  # -smp cpus=28,cores=14,threads=2,sockets=1 \
  # -cdrom tmp/virtio-win-0.1.266.iso \
  #-mem-prealloc \
  #-mem-path /dev/hugepages \
  #-cdrom /data/downloads/windows_11_ltsc.iso \
  #-device intel-hda -device hda-duplex \
  #-net nic,model=virtio -net user,hostfwd=tcp::${SSH_PORT}-:22 \

{ kill $swtpm_pid && wait $swtpm_pid; } 2>/dev/null

#echo "0000:${IOMMU_USB_CONTROLLER}" > /sys/bus/pci/devices/0000:${IOMMU_USB_CONTROLLER}/driver/unbind
#echo "0000:${IOMMU_USB_CONTROLLER}" > /sys/bus/pci/drivers/xhci_hcd/bind

#cset shield --reset